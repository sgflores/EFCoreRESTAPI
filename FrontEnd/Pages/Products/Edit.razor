@page "/Products/edit/{Id:int}"
@attribute [Authorize]

@inject IProductService productService

<h3>Edit Product</h3>

@if (product != null)
{
    <FrontEnd.Shared.Alert IsSubmitted="@_isSubmitted" Type="@_alertType" Message="@_message"></FrontEnd.Shared.Alert>

    <FrontEnd.Pages.Products.Form product="@product"
                                  OnSubmitHandler="@(async()=>await OnSubmit())"
                                  OnInvalidSubmitHandler="@OnInvalidSubmit"></FrontEnd.Pages.Products.Form>
}
else if (_loadFailed)
{
    <p>No Record Found!</p>
}
else
{
    <p>Loading...</p>
}


@code {
    [Parameter]
    public int Id { get; set; }

    ProductsViewModel product;

    private bool _loadFailed = false;
    private bool _isSubmitted = false;
    private string _message = "Successfully Saved!";
    private string _alertType = "success";

    protected async override Task OnInitializedAsync()
    {
        await LoadProduct();
    }


    private async Task LoadProduct()
    {
        try
        {
            product = await productService.GetSingleAsync(Id);
            _loadFailed = false;
        }
        catch (Exception ex)
        {
            _loadFailed = true;
        }
    }

    private async Task OnSubmit()
    {
        _isSubmitted = false;
        try
        {
            await productService.Update(product.Id, product);
            _isSubmitted = true;
            _alertType = "success";
            _message = "Successfully Saved!";
        }
        catch (Exception ex)
        {
            _isSubmitted = true;
            _alertType = "error";
            _message = "Error(s) Found!";
        }
    }

    private void OnInvalidSubmit()
    {
        _isSubmitted = true;
        _alertType = "error";
        _message = "Error(s) Found!";
    }


}
