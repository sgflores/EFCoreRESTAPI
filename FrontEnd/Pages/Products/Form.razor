<EditForm Model=@product OnValidSubmit=@ValidFormSubmitted OnInvalidSubmit=@InvalidFormSubmitted>
    <DataAnnotationsValidator />

    <ValidationSummary />

    <div class="form-group">
        <label for="Name">Product Name</label>
        <InputText id="Name" class="form-control" @bind-Value="product.Name" />
    </div>

    <div class="form-group">
        @product.CategoryId @product.StrCategoryId
        <label for="CategoryId">Category</label>
        <select id="CategoryId" class="form-control" @bind="product.CategoryId">
            @if (categories != null)
            {
                @foreach (var category in categories)
                {
                    <option value="@category.Id">@category.Name @category.Id</option>
                }
            }
        </select>
    </div>


    <div class="form-group">
        <label for="Color">Color</label>
        <InputText id="Color" class="form-control" @bind-Value="product.Color" />
    </div>

    <!--<div class="form-group">
        <label for="Category">Category</label>
        <InputText id="Category" class="form-control" @bind-Value="product.Category" />
    </div>-->

    <div class="form-group">
        <label for="UnitPrice">Unit Price</label>
        <InputNumber id="UnitPrice" class="form-control" @bind-Value="product.UnitPrice" />
    </div>

    <div class="form-group">
        <label for="AvailableQuantity">Quantity</label>
        <InputNumber id="AvailableQuantity" class="form-control" @bind-Value="product.AvailableQuantity" />
    </div>


    <input type="submit" class="btn btn-primary" value="Save" />
</EditForm>

@code {

    [Parameter]
    public ProductsViewModel product { get; set; }

    [Parameter]
    public EventCallback<Products> OnSubmitHandler { get; set; }

    [Parameter]
    public EventCallback<Products> OnInvalidSubmitHandler { get; set; }

    CategoryService categoryService;
    List<CategoryViewModel> categories;

    protected override async Task OnParametersSetAsync()
    {
        Dictionary<string, string> param = new Dictionary<string, string>();
        param.Add("isActive", "1");
        categoryService = new CategoryService();
        categories = await categoryService.GetListAsync(param);
    }

    /*protected async override Task OnInitializedAsync()
    {
        Dictionary<string, string> param = new Dictionary<string, string>();
        param.Add("isActive", "1");
        categoryService = new CategoryService();
        categories = await categoryService.GetListAsync(param);
    }*/

    private async Task ValidFormSubmitted()
    {
        await OnSubmitHandler.InvokeAsync(product);
    }

    private async Task InvalidFormSubmitted()
    {
        await OnInvalidSubmitHandler.InvokeAsync(product);
    }

}
