@page "/Categories/edit/{Id:int}"

@inject ICategoryService categoryService

<h3>Edit Category</h3>

@if (category != null)
{
    <FrontEnd.Shared.Alert IsSubmitted="@_isSubmitted" Type="@_alertType" Message="@_message"></FrontEnd.Shared.Alert>

    <FrontEnd.Pages.Categories.Form category="@category" statuses="@_statuses"
                                    OnSubmitHandler="@(async()=>await OnSubmit())"
                                    OnInvalidSubmitHandler="@OnInvalidSubmit"></FrontEnd.Pages.Categories.Form>
}
else if (_loadFailed)
{
    <p>No Record Found!</p>
}
else
{
    <p>Loading...</p>
}


@code {
    [Parameter]
    public int Id { get; set; }

    CategoryViewModel category;
    StaticService staticService;
    List<Status> _statuses;

    private bool _loadFailed = false;
    private bool _isSubmitted = false;
    private string _message = "Successfully Saved!";
    private string _alertType = "success";

    protected async override Task OnInitializedAsync()
    {
        staticService = new StaticService();
        _statuses = staticService.GetStatus();
        await LoadCategory();
    }


    private async Task LoadCategory()
    {
        try
        {
            category = await categoryService.GetSingleAsync(Id);
            _loadFailed = false;
        }
        catch (Exception ex)
        {
            _loadFailed = true;
        }
    }

    private async Task OnSubmit()
    {
        _isSubmitted = false;
        try
        {
            await categoryService.Update(category.Id, category);
            _isSubmitted = true;
            _alertType = "success";
            _message = "Successfully Saved!";
        }
        catch (Exception ex)
        {
            _isSubmitted = true;
            _alertType = "error";
            _message = "Error(s) Found!";
        }
    }

    private void OnInvalidSubmit()
    {
        _isSubmitted = true;
        _alertType = "error";
        _message = "Error(s) Found!";
    }


}
